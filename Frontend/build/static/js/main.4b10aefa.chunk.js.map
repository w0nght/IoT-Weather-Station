{"version":3,"sources":["recordUtilities.js","graphs/HourlyLineChart.js","graphs/analytics/getRegression.js","graphs/TempVsHumScatterChart.js","graphs/analytics/getAggregates.js","graphs/analytics/location.js","graphs/AllLocationsScatterChart.js","graphs/AllLocationsLineChart.js","graphs/SingleLocationHourlyLineChart.js","graphs/HourlyVarianceBarChart.js","displayCurrent.js","App.js","serviceWorker.js","index.js"],"names":["require","HourlyAverageLineChart","props","type","width","height","data","isAnimationActive","dataKey","domain","ticks","label","value","position","offset","unit","dx","dy","angle","name","stroke","fill","verticalAlign","align","wrapperStyle","paddingLeft","strokeDasharray","getRegression","records","independentName","dependentName","min","max","regressionValues","result","i","push","parseInt","regressionResult","regression","linear","gradient","equation","yInt","toFixed","TempVsHumScatterChart","useState","humReg","setHumReg","useEffect","length","reg","console","log","JSON","stringify","dot","getValuesInHour","hour","forEach","record","time","moment","timestamp","format","getHourlyAggregatesByLocation","locationId","hours","locationRecords","location","getRecordsInLocation","valuesInHour","average","getAverage","getMin","getMax","avg","count","getHourlyAggregates","Math","apply","map","v","total","Array","isArray","AllLocationsScatterChart","combined","setCombined","l2Reg","setL2Reg","l3Reg","setL3Reg","l1","l2","l3","allValues","yAxisId","hide","legendType","parseFloat","SingleLocationHourlyLineChart","setData","hourly","valuesOnly","std","variance","getHourlyStandardDevAndVariance","yDomain","yTicks","metric","DisplayCurrentBox","d","loc","filter","filterForLocation","sort","a","b","Box","color","bgcolor","style","textAlign","socket","connect","reconnect","useStyles","makeStyles","theme","backdrop","zIndex","drawer","App","classes","React","loading","setLoading","temps","setTemps","hums","setHums","hourlyAggregates","setHourlyAggregates","fanTemp","setFanTemp","on","fetch","method","headers","then","res","json","tempAggregates","humAggregates","temp","hum","minTemp","maxTemp","tempCount","minHum","maxHum","humCount","className","Backdrop","open","CircularProgress","AppBar","padding","Container","Typography","variant","marginTop","Grid","container","justify","spacing","item","xs","Paper","Slider","onChange","e","connected","emit","step","valueLabelDisplay","marks","Boolean","window","hostname","match","ReactDOM","render","StrictMode","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4b10aefa.chunk.js","sourcesContent":["// const tempRecords = require('./data/temps.json');\r\n// const humRecords = require('./data/hum.json');\r\nconst moment = require('moment');\r\nconst regression = require('regression');\r\n\r\n// const temps = convertRecord(tempRecords);\r\n// const hums = convertRecord(humRecords);\r\n//\r\n// const sortedTemps = temps.sort(sortByTimestamp);\r\n// const sortedHums = hums.sort(sortByTimestamp);\r\n//\r\n// console.log(\"OUTPUTTING SORTED TEMPS\");\r\n// sortedTemps.forEach((record) => {\r\n//     console.log(record);\r\n// })\r\n//\r\n// console.log(\"OUTPUTTING SORTED HUMS\");\r\n// sortedHums.forEach((record) => {\r\n//     console.log(record);\r\n// })\r\n\r\n\r\n\r\n\r\nexport function convertRecordHum(humRecords) {\r\n    let array = [];\r\n    humRecords.forEach((record) => {\r\n        array.push({\r\n            location: record.location.S,\r\n            timestamp: record.timestamp.S,\r\n            hum: record.value.N,\r\n        });\r\n    })\r\n    return array;\r\n}\r\n\r\nexport function convertRecordTemp(tempRecords) {\r\n    let array = [];\r\n    tempRecords.forEach((record) => {\r\n        array.push({\r\n            location: record.location.S,\r\n            timestamp: record.timestamp.S,\r\n            temp: record.value.N,\r\n        });\r\n    })\r\n    return array;\r\n}\r\n\r\nexport function convertRecord(dynamoRecords) {\r\n    let array = [];\r\n    console.log(dynamoRecords);\r\n    dynamoRecords.forEach((record) => {\r\n        array.push({\r\n            location: record.location,\r\n            timestamp: record.timestamp,\r\n            value: record.value,\r\n        });\r\n    })\r\n    return array;\r\n}\r\n\r\nexport function recordUtilities(a, b) {\r\n    const timestampA = moment(a.timestamp).format('YYYY-MM-DD HH:mm:ss');\r\n    const timestampB = moment(b.timestamp).format('YYYY-MM-DD HH:mm:ss');\r\n\r\n    if (timestampA < timestampB) {\r\n        return -1;\r\n    }\r\n    if (timestampB < timestampA) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n","import React from \"react\";\r\nimport {CartesianGrid, Legend, Line, LineChart, Tooltip, XAxis, YAxis} from \"recharts\";\r\nexport default function HourlyAverageLineChart(props) {\r\n    if (props.type === \"temp\") {\r\n        return (\r\n            <LineChart\r\n                width={500}\r\n                height={400}\r\n                data={props.data}\r\n                isAnimationActive={false}>\r\n                <XAxis dataKey=\"hour\" type=\"number\" domain={[0, 23]} ticks={[0, 5, 11, 17, 23]}\r\n                       label={{value: 'Hour', position: 'insideBottom', offset: 0}}/>\r\n                <YAxis dataKey=\"temp\" domain={[10, 25]} ticks={[10, 15, 20, 25]} unit=\"C\"\r\n                       label={{value: 'Mean temperature (C)', dx: 10, dy: 50, angle: -90, position: 'insideLeft'}}/>\r\n\r\n                <Line name=\"max\" dataKey=\"maxTemp\" stroke=\"red\" fill=\"white\"/>\r\n                <Line name=\"avg\" dataKey=\"temp\" stroke=\"green\" fill=\"white\"/>\r\n                <Line name=\"min\" dataKey=\"minTemp\" stroke=\"blue\" fill=\"white\"/>\r\n                <Legend verticalAlign=\"top\" align=\"center\" wrapperStyle={{paddingLeft: \"80px\"}} />\r\n                <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n                <Tooltip/>\r\n            </LineChart>\r\n        );\r\n    } else if (props.type === \"hum\") {\r\n        return (\r\n            <LineChart\r\n                width={500}\r\n                height={400}\r\n                data={props.data}\r\n                isAnimationActive={false}>\r\n                <XAxis dataKey=\"hour\" type=\"number\" domain={[0, 23]} ticks={[0, 5, 11, 17, 23]}\r\n                       label={{value: 'Hour', position: 'insideBottom', offset: 0}}/>\r\n                <YAxis dataKey=\"hum\" domain={[0, 100]} unit=\"%\"\r\n                       label={{value: 'Mean humidity (%)', dx: 10, dy: 40, angle: -90, position: 'insideLeft'}}/>\r\n                <Line name=\"max\" dataKey=\"maxHum\" stroke=\"red\" fill=\"white\"/>\r\n                <Line name=\"avg\" dataKey=\"hum\" stroke=\"green\" fill=\"white\"/>\r\n                <Line name=\"min\" dataKey=\"minHum\" stroke=\"blue\" fill=\"white\"/>\r\n                <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n                <Legend verticalAlign=\"top\" align=\"center\" wrapperStyle={{paddingLeft: \"80px\"}} />\r\n                <Tooltip/>\r\n            </LineChart>\r\n        )\r\n    }\r\n}\r\n","import regression from 'regression';\r\n\r\nexport default function getRegression(records, independentName, dependentName, min, max) {\r\n    let regressionValues = [];\r\n    let result = [];\r\n    for (let i = min; i < 24; i++) {\r\n        if (records[i]) {\r\n            regressionValues.push([parseInt(records[i][independentName]), parseInt(records[i][dependentName])]);\r\n        }\r\n    }\r\n    const regressionResult = regression.linear(regressionValues);\r\n    const gradient = regressionResult.equation[0];\r\n    const yInt = regressionResult.equation[1];\r\n\r\n    for (let i = min; i < max + 1; i++) {\r\n        result.push(\r\n            {\r\n                [independentName]: i,\r\n                [dependentName]: ((gradient * i) + yInt).toFixed(2),\r\n            }\r\n        )\r\n    }\r\n    return result;\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {CartesianGrid, ComposedChart, Legend, Line, LineChart, Scatter, Tooltip, XAxis, YAxis} from \"recharts\";\r\nimport getRegression from \"./analytics/getRegression\";\r\n\r\nexport default function TempVsHumScatterChart(props) {\r\n    const [humReg, setHumReg] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (props.data.length) {\r\n            const reg = getRegression(props.data, \"temp\", \"hum\", 0, 25);\r\n            console.log(JSON.stringify(reg));\r\n            setHumReg(reg);\r\n        }\r\n    }, [props.data]);\r\n\r\n    return (\r\n        <ComposedChart\r\n            width={500}\r\n            height={400}\r\n            isAnimationActive={false}>\r\n            <XAxis dataKey=\"temp\" type=\"number\" unit=\"C\" domain={[0, 25]} ticks={[0, 5, 10, 15, 20, 25]}\r\n                   label={{value: 'Temperature (C)', position: 'insideBottom', offset: 0}}/>\r\n            <YAxis dataKey=\"hum\" type=\"number\" domain={[0, 100]} unit=\"%\"\r\n                   label={{value: 'Humidity (%)', dx: 10, dy: 40, angle: -90, position: 'insideLeft'}}/>\r\n            <Scatter name=\"humidity\" data={props.data} fill=\"red\"/>\r\n            <Line name=\"humidity regression\" dot={false} data={humReg} dataKey=\"hum\" fill=\"red\"/>\r\n            <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n            <Tooltip/>\r\n        </ComposedChart>\r\n    )\r\n}\r\n","import { getRecordsInLocation } from \"./location\";\r\nimport { std, variance } from \"mathjs\";\r\nimport moment from \"moment\";\r\n\r\nexport function getValuesInHour(records, hour) {\r\n  let result = [];\r\n  records.forEach((record) => {\r\n    const time = moment(record.timestamp).format(\"YYYY-MM-DD HH:mm:ss\");\r\n\r\n    if (moment(time).hour() == hour) {\r\n      result.push(record);\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\nexport function getHourlyStandardDevAndVariance(records) {\r\n  const hours = [];\r\n  for (let i = 0; i < 24; i++) {\r\n    const valuesInHour = getValuesInHour(records, i);\r\n    let valuesOnly = [];\r\n    valuesInHour.forEach((value) => {\r\n      valuesOnly.push(value.value);\r\n    });\r\n    if (valuesOnly.length) {\r\n      hours.push({\r\n        std: std(valuesOnly).toFixed(2),\r\n        variance: variance(valuesOnly).toFixed(2),\r\n        hour: i,\r\n      });\r\n    }\r\n  }\r\n  return hours;\r\n}\r\n\r\nexport function getHourlyAverages(records) {\r\n  const hours = [];\r\n  for (let i = 0; i < 24; i++) {\r\n    const valuesInHour = getValuesInHour(records, i);\r\n    hours.push(getAverage(valuesInHour).toFixed(2));\r\n  }\r\n  return hours;\r\n}\r\n\r\nexport function getHourlyAggregatesByLocation(records, locationId) {\r\n  const hours = [];\r\n  const locationRecords = getRecordsInLocation(records, locationId);\r\n\r\n  for (let i = 0; i < 24; i++) {\r\n    const valuesInHour = getValuesInHour(locationRecords, i);\r\n    let average = getAverage(valuesInHour).toFixed(2);\r\n    let min = getMin(valuesInHour);\r\n    let max = getMax(valuesInHour);\r\n    if (min != 0 && max != 0 && average != 0) {\r\n      hours.push({\r\n        hour: i,\r\n        avg: getAverage(valuesInHour).toFixed(2),\r\n        min: getMin(valuesInHour),\r\n        max: getMax(valuesInHour),\r\n        count: valuesInHour.length,\r\n      });\r\n    } else {\r\n      if (hours[i - 1]) {\r\n        hours.push({\r\n          hour: i,\r\n          avg: hours[i - 1].avg,\r\n          min: hours[i - 1].min,\r\n          max: hours[i - 1].max,\r\n          count: 1,\r\n        });\r\n      } else {\r\n        hours.push({\r\n          hour: i,\r\n          avg: 0,\r\n          min: 0,\r\n          max: 0,\r\n          count: 1,\r\n        });\r\n      }\r\n    }\r\n  }\r\n  return hours;\r\n}\r\n\r\nexport function getHourlyAggregates(records) {\r\n  const hours = [];\r\n  for (let i = 0; i < 24; i++) {\r\n    const valuesInHour = getValuesInHour(records, i);\r\n    let average = getAverage(valuesInHour).toFixed(2);\r\n    let min = getMin(valuesInHour);\r\n    let max = getMax(valuesInHour);\r\n\r\n    if (min != 0 && max != 0 && average != 0) {\r\n      hours.push({\r\n        hour: i,\r\n        avg: getAverage(valuesInHour).toFixed(2),\r\n        min: getMin(valuesInHour),\r\n        max: getMax(valuesInHour),\r\n        count: valuesInHour.length,\r\n      });\r\n    } else {\r\n      if (hours[i - 1]) {\r\n        hours.push({\r\n          hour: i,\r\n          avg: hours[i - 1].avg,\r\n          min: hours[i - 1].min,\r\n          max: hours[i - 1].max,\r\n          count: 1,\r\n        });\r\n      } else {\r\n        hours.push({\r\n          hour: i,\r\n          avg: 0,\r\n          min: 0,\r\n          max: 0,\r\n          count: 1,\r\n        });\r\n      }\r\n    }\r\n  }\r\n  return hours;\r\n}\r\n\r\nexport function getMax(records) {\r\n  return Math.max.apply(\r\n    Math,\r\n    records.map((v) => {\r\n      return v.value;\r\n    })\r\n  );\r\n}\r\n\r\nexport function getMin(records) {\r\n  return Math.min.apply(\r\n    Math,\r\n    records.map((v) => {\r\n      return v.value;\r\n    })\r\n  );\r\n}\r\n\r\nexport function getAverage(records) {\r\n  let total = 0;\r\n  if (!(Array.isArray(records) && records.length)) {\r\n    return 0;\r\n  }\r\n\r\n  records.forEach((record) => {\r\n    total += parseInt(record.value);\r\n  });\r\n\r\n  return total / records.length;\r\n}\r\n","export function getRecordsInLocation(records, locationId){\r\n    let result = [];\r\n    records.forEach((record) => {\r\n        if (record.location == locationId) {\r\n            result.push(record);\r\n        }\r\n    })\r\n    return result;\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {CartesianGrid, ComposedChart, Line, LineChart, Scatter, Tooltip, XAxis, YAxis} from \"recharts\";\r\nimport {getHourlyAggregatesByLocation} from \"./analytics/getAggregates\";\r\nimport getRegression from \"./analytics/getRegression\";\r\nimport Legend from \"recharts/lib/component/Legend\";\r\n\r\nexport default function AllLocationsScatterChart(props) {\r\n    const [combined, setCombined] = useState([]);\r\n    const [l2Reg, setL2Reg] = useState([]);\r\n    const [l3Reg, setL3Reg] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (props.data.length > 0) {\r\n            const l1 = getHourlyAggregatesByLocation(props.data, 1);\r\n            const l2 = getHourlyAggregatesByLocation(props.data, 2);\r\n            const l3 = getHourlyAggregatesByLocation(props.data, 3);\r\n\r\n            let allValues = [];\r\n            for (let i = 0; i < 23; i++) {\r\n                if (l1[i].avg && l2[i].avg && l3[i].avg) {\r\n                    allValues.push({\r\n                        l1: l1[i].avg,\r\n                        l2: l2[i].avg,\r\n                        l3: l3[i].avg,\r\n                        hour: i,\r\n                    });\r\n                }\r\n            }\r\n            setCombined(allValues);\r\n\r\n\r\n            if (props.type===\"temp\"){\r\n                setL2Reg(getRegression(allValues, \"l1\", \"l2\", 0, 25));\r\n                setL3Reg(getRegression(allValues, \"l1\", \"l3\", 0, 25));\r\n            } else if (props.type===\"hum\"){\r\n                setL2Reg(getRegression(allValues, \"l1\", \"l2\", 0, 100));\r\n                setL3Reg(getRegression(allValues, \"l1\", \"l3\", 0, 100));\r\n            }\r\n\r\n\r\n        }\r\n    }, [props.data]);\r\n\r\n    if (props.type === \"temp\") {\r\n        return (\r\n            <ComposedChart\r\n                isAnimationActive={false}\r\n                width={500}\r\n                height={400}>\r\n                <XAxis dataKey=\"l1\" type=\"number\" domain={[0, 25]} ticks={[0, 5, 10, 15, 20, 25]} unit=\"C\"\r\n                       label={{value: 'Location 1 Temp (C)', position: 'insideBottom', offset: 0}}/>\r\n                <YAxis yAxisId=\"l2\" dataKey=\"l2\" hide={true} type=\"number\" domain={[10, 20]}\r\n                />\r\n                <YAxis yAxisId=\"l3\" dataKey=\"l3\" type=\"number\" domain={[0, 25]} ticks={[0, 5, 10, 15, 20, 25]} unit=\"C\"\r\n                       label={{value: 'Other Location Temp (C)', dy: 80, dx: 10, angle: -90, position: 'insideLeft'}}/>\r\n                <Scatter name=\"location 2\" yAxisId=\"l2\" dataKey=\"l2\" data={combined} fill=\"red\"/>\r\n                <Scatter name=\"location 3\" yAxisId=\"l3\" dataKey=\"l3\" data={combined} fill=\"green\"/>\r\n\r\n                <Line name=\"location 2 regression\" legendType=\"none\" dot={false} yAxisId=\"l2\" dataKey=\"l2\" data={l2Reg} stroke=\"red\"/>\r\n                <Line name=\"location 3 regression\" legendType=\"none\" dot={false} yAxisId=\"l3\" dataKey=\"l3\" data={l3Reg} stroke=\"green\"/>\r\n                <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n                <Legend verticalAlign=\"top\" align=\"center\" wrapperStyle={{paddingLeft: \"80px\"}}/>\r\n                <Tooltip/>\r\n\r\n            </ComposedChart>\r\n        )\r\n    } else {\r\n        return (\r\n            <ComposedChart\r\n                isAnimationActive={false}\r\n                width={500}\r\n                height={400}>\r\n                <XAxis dataKey=\"l1\" type=\"number\" domain={[0, 100]} unit=\"%\"\r\n                       label={{value: 'Location 1 Humidity (%)', position: 'insideBottom', offset: 0}}/>\r\n                <YAxis yAxisId=\"l2\" dataKey=\"l2\" hide={true} type=\"number\" domain={[0, 100]}\r\n                />\r\n                <YAxis yAxisId=\"l3\" dataKey=\"l3\" type=\"number\" domain={[0, 100]} unit=\"%\"\r\n                       label={{value: 'Other Location Humidity (%)', dy: 80, angle: -90, position: 'insideLeft'}}/>\r\n                <Scatter name=\"location 2\" yAxisId=\"l2\" dataKey=\"l2\" data={combined} fill=\"red\"/>\r\n                <Scatter name=\"location3\" yAxisId=\"l3\" dataKey=\"l3\" data={combined} fill=\"green\"/>\r\n\r\n                <Line name=\"location 2 regression\" legendType=\"none\" dot={false} yAxisId=\"l2\" dataKey=\"l2\" data={l2Reg} stroke=\"red\"/>\r\n                <Line name=\"location 3 regression\" legendType=\"none\" dot={false} yAxisId=\"l3\" dataKey=\"l3\" data={l3Reg} stroke=\"green\"/>\r\n                <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n                <Legend verticalAlign=\"top\" align=\"center\" wrapperStyle={{paddingLeft: \"80px\"}}/>\r\n                <Tooltip/>\r\n            </ComposedChart>\r\n        )\r\n    }\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {CartesianGrid, Line, LineChart, Tooltip, XAxis, YAxis} from \"recharts\";\r\nimport {getHourlyAggregatesByLocation, getHourlyAverages} from \"./analytics/getAggregates\";\r\nimport Legend from \"recharts/lib/component/Legend\";\r\n\r\nexport default function AllLocationsScatterChart(props) {\r\n    const [combined, setCombined] = useState([]);\r\n    useEffect(() => {\r\n        if (props.data.length > 0) {\r\n            const l1 = getHourlyAggregatesByLocation(props.data, 1);\r\n            const l2 = getHourlyAggregatesByLocation(props.data, 2);\r\n            const l3 = getHourlyAggregatesByLocation(props.data, 3);\r\n            let allValues = [];\r\n            for (let i = 0; i < 24; i++) {\r\n                let total = 0;\r\n                let count = 0;\r\n                const value = {\r\n                    hour: i,\r\n                };\r\n\r\n                if (l1[i].avg) {\r\n                    value.l1 = l1[i].avg;\r\n                    total += parseFloat(l1[i].avg);\r\n                    count ++;\r\n                }\r\n                if (l2[i].avg) {\r\n                    value.l2 = l2[i].avg;\r\n                    total += parseFloat(l2[i].avg);\r\n                    count ++;\r\n                }\r\n                if (l3[i].avg){\r\n                    value.l3 = l3[i].avg;\r\n                    total += parseFloat(l3[i].avg);\r\n                    count ++;\r\n                }\r\n\r\n                if (count) {\r\n                    value.avg = total / count;\r\n                }\r\n                allValues.push(value);\r\n            }\r\n            setCombined(allValues);\r\n        }\r\n    }, [props.data]);\r\n\r\n    if (props.type === \"temp\") {\r\n        return (\r\n            <LineChart\r\n                isAnimationActive={false}\r\n                data={combined}\r\n                width={500}\r\n                height={400}>\r\n                <XAxis dataKey=\"hour\" type=\"number\" domain={[0, 23]} ticks={[0, 5, 11, 17, 23]}\r\n                       label={{value: 'Hour', position: 'insideBottom', offset: 0}}/>\r\n                <YAxis type=\"number\" domain={[10, 25]} ticks={[10, 15, 20, 25]} unit=\"C\"\r\n                       label={{value: 'Mean Temp (C)', dx: 10, dy: 50, angle: -90, position: 'insideLeft'}}/>\r\n                <Line dataKey=\"l1\" name=\"location 1\" stroke=\"red\"/>\r\n                <Line dataKey=\"l2\" name=\"location 2\" stroke=\"blue\"/>\r\n                <Line dataKey=\"l3\" name=\"location3\" stroke=\"green\"/>\r\n                <Line dataKey=\"avg\" name=\"avg\" stroke=\"grey\"/>\r\n                <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n                <Legend verticalAlign=\"top\" align=\"center\" wrapperStyle={{paddingLeft: \"60px\"}} />\r\n                <Tooltip/>\r\n            </LineChart>\r\n        )\r\n    } else {\r\n        return (\r\n            <LineChart\r\n                isAnimationActive={false}\r\n                width={500}\r\n                data={combined}\r\n                height={400}>\r\n                <XAxis dataKey=\"hour\" type=\"number\" domain={[0, 23]} ticks={[0, 5, 11, 17, 23]}\r\n                       label={{value: 'Hour', position: 'insideBottom', offset: 0}}/>\r\n                <YAxis type=\"number\" domain={[0, 100]} unit=\"%\"\r\n                       label={{value: 'Mean Humidity (%)', dx: 10, dy: 50, angle: -90, position: 'insideLeft'}}/>\r\n                <Line dataKey=\"l1\" name=\"location 1\" stroke=\"red\"/>\r\n                <Line dataKey=\"l2\" name=\"location 2\" stroke=\"blue\"/>\r\n                <Line dataKey=\"l3\" name=\"location3\" stroke=\"green\"/>\r\n                <Line dataKey=\"avg\" name=\"avg\" stroke=\"grey\"/>\r\n                <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n                <Legend verticalAlign=\"top\" align=\"center\" wrapperStyle={{paddingLeft: \"60px\"}} />\r\n                <Tooltip/>\r\n            </LineChart>\r\n        )\r\n    }\r\n}\r\n","import React, {useState, useEffect} from \"react\";\r\nimport {CartesianGrid, Legend, Line, LineChart, Tooltip, XAxis, YAxis} from \"recharts\";\r\nimport {getHourlyAggregatesByLocation} from \"./analytics/getAggregates\";\r\n\r\nexport default function SingleLocationHourlyLineChart(props) {\r\n    const [data, setData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (props.data.length) {\r\n            const result = (getHourlyAggregatesByLocation(props.data, props.location));\r\n            const hourly = [];\r\n            result.forEach((value) => {\r\n                if (value.min && value.max && value.avg) {\r\n                    hourly.push(value);\r\n                }\r\n            })\r\n            setData(hourly);\r\n        }\r\n    },[props.data]);\r\n\r\n    if (props.type === \"temp\") {\r\n        return (\r\n            <LineChart\r\n                width={500}\r\n                height={400}\r\n                data={data}\r\n                isAnimationActive={false}>\r\n                <XAxis dataKey=\"hour\" type=\"number\" domain={[0, 23]} ticks={[0, 5, 11, 17, 23]}\r\n                       label={{value: 'Hour', position: 'insideBottom', offset: 0}}/>\r\n                <YAxis dataKey=\"temp\" domain={[10, 25]} ticks={[10, 15, 20, 25]} unit=\"C\"\r\n                       label={{value: 'Mean temperature (C)', dx: 10, dy: 50, angle: -90, position: 'insideLeft'}}/>\r\n                <Line name=\"max\" dataKey=\"max\" stroke=\"red\" fill=\"white\"/>\r\n                <Line name=\"avg\" dataKey=\"avg\" stroke=\"green\" fill=\"white\"/>\r\n                <Line name=\"min\" dataKey=\"min\" stroke=\"blue\" fill=\"white\"/>\r\n                <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n                <Legend verticalAlign=\"top\" align=\"center\" wrapperStyle={{paddingLeft: \"80px\"}} />\r\n                <Tooltip/>\r\n            </LineChart>\r\n        );\r\n    } else {\r\n        return (\r\n            <LineChart\r\n                width={500}\r\n                height={400}\r\n                data={data}\r\n                isAnimationActive={false}>\r\n                <XAxis dataKey=\"hour\" type=\"number\" domain={[0, 23]} ticks={[0, 5, 11, 17, 23]}\r\n                       label={{value: 'Hour', position: 'insideBottom', offset: 0}}/>\r\n                <YAxis dataKey=\"hum\" domain={[0, 100]} unit=\"%\"\r\n                       label={{value: 'Mean humidity (%)', dx: 10, dy: 50, angle: -90, position: 'insideLeft'}}/>\r\n                <Line name=\"max\" dataKey=\"max\" stroke=\"red\" fill=\"white\"/>\r\n                <Line name=\"avg\" dataKey=\"avg\" stroke=\"green\" fill=\"white\"/>\r\n                <Line name=\"min\" dataKey=\"min\" stroke=\"blue\" fill=\"white\"/>\r\n                <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n                <Legend verticalAlign=\"top\" align=\"center\" wrapperStyle={{paddingLeft: \"80px\"}} />\r\n                <Tooltip/>\r\n            </LineChart>\r\n        )\r\n    }\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {Bar, BarChart, CartesianGrid, Legend, Line, LineChart, Tooltip, XAxis, YAxis} from \"recharts\";\r\nimport {getHourlyStandardDevAndVariance} from \"./analytics/getAggregates\";\r\n\r\nexport default function HourlyAverageLineChart(props) {\r\n    const [data, setData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (props.data.length) {\r\n            const result = getHourlyStandardDevAndVariance(props.data);\r\n            setData(result);\r\n        }\r\n    }, [props.data]);\r\n\r\n    let yDomain = [0, 125];\r\n    let yTicks = [0, 25, 50, 75, 100, 125];\r\n\r\n    if (props.metric==\"variance\") {\r\n        return (\r\n            <BarChart\r\n                width={500}\r\n                height={400}\r\n                data={data}\r\n                isAnimationActive={false}>\r\n                <XAxis dataKey=\"hour\" type=\"number\" domain={[0, 23]} ticks={[0, 5, 11, 17, 23]}\r\n                       label={{value: 'Hour', position: 'insideBottom', offset: 0}}/>\r\n                <YAxis dataKey=\"variance\" domain={yDomain} ticks={yTicks}\r\n                       label={{value: 'Variance', angle: -90, dx: 15, dy: 30, position: 'insideLeft'}}/>\r\n                <Bar name=\"variance\" dataKey=\"variance\" fill=\"green\"/>\r\n                <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n                <Tooltip/>\r\n            </BarChart>\r\n        );\r\n    } else {\r\n        return (\r\n            <BarChart\r\n                width={500}\r\n                height={400}\r\n                data={data}\r\n                isAnimationActive={false}>\r\n                <XAxis dataKey=\"hour\" type=\"number\" domain={[0, 23]} ticks={[0, 5, 11, 17, 23]}\r\n                       label={{value: 'Hour', position: 'insideBottom', offset: 0}}/>\r\n                <YAxis dataKey=\"std\" domain={yDomain} ticks={yTicks}\r\n                       label={{value: 'Standard Deviation', dx: 15, dy: 50, angle: -90, position: 'insideLeft'}}/>\r\n                <Bar name=\"std\" dataKey=\"std\" fill=\"blue\"/>\r\n                <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n                <Tooltip/>\r\n            </BarChart>\r\n        );\r\n    }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\nimport { Legend, Line, LineChart, XAxis, YAxis } from \"recharts\";\r\nimport { getCurrentInLocation } from \"./graphs/analytics/getCurrent\";\r\nimport Box from \"@material-ui/core/Box\";\r\nexport default function DisplayCurrentBox(props) {\r\n  const [data, setData] = useState(null);\r\n  const sth = \"something\";\r\n\r\n  useEffect(() => {\r\n    if (props.data.length) {\r\n      console.log(props.data);\r\n\r\n      const d = filterForLocation(props.data).sort((a, b) =>\r\n        moment(a.timestamp) > moment(b.timestamp) ? -1 : 1\r\n      );\r\n      console.log(d);\r\n      setData(d[0].value);\r\n      // let val = [];\r\n      // val.push({\r\n      //     dLo: data.location,\r\n      //     dTime: data.timestamp,\r\n      //     dVal: data.value,\r\n      // })\r\n    }\r\n  }, [props.data]);\r\n  // console.log({data});\r\n\r\n  function filterForLocation(data) {\r\n    const loc = props.location;\r\n    return data.filter((d) => d.location == loc);\r\n  }\r\n\r\n  if (props.type === \"temp\") {\r\n    return (\r\n      <Box color=\"white\" bgcolor=\"palevioletred\" style={{textAlign: 'center'}}>\r\n        {data && `${data}\\u00b0C`}\r\n      </Box>\r\n    );\r\n  } else if (props.type === \"hum\") {\r\n    return (\r\n      <Box color=\"white\" bgcolor=\"royalblue\" style={{textAlign: 'center'}}>\r\n        {data && `${data}%`}\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n","import React, { useEffect, useState } from \"react\";\nimport { convertRecord } from \"./recordUtilities\";\nimport {\n  AppBar,\n  Container,\n  Paper,\n  Grid,\n  Typography,\n  Slider,\n} from \"@material-ui/core\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport HourlyAverageLineChart from \"./graphs/HourlyLineChart\";\nimport TempVsHumScatterChart from \"./graphs/TempVsHumScatterChart\";\nimport { getHourlyAggregates } from \"./graphs/analytics/getAggregates\";\nimport AllLocationsScatterChart from \"./graphs/AllLocationsScatterChart\";\nimport AllLocationsLineChart from \"./graphs/AllLocationsLineChart\";\nimport SingleLocationHourlyLineChart from \"./graphs/SingleLocationHourlyLineChart\";\nimport HourlyVarianceBarChart from \"./graphs/HourlyVarianceBarChart\";\nimport DisplayCurrentBox from \"./displayCurrent\";\n\nconst io = require(\"socket.io-client\");\nconst socket = io.connect(\"http://149.28.177.118:8000\", { reconnect: true });\n\nconst useStyles = makeStyles((theme) => ({\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: \"#fff\",\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [loading, setLoading] = React.useState(true);\n\n  const [temps, setTemps] = useState([]);\n  const [hums, setHums] = useState([]);\n  // [{temp: 17.5, hum: 66.3, hour: 0}, {temp: 14.4, hum: 65.0, hour: 1} ...]\n  const [hourlyAggregates, setHourlyAggregates] = useState([]);\n\n  const [fanTemp, setFanTemp] = useState(10);\n\n  useEffect(() => {\n    socket.on(\"connect\", function () {\n      console.log(\"Connected\");\n\n      socket.on(\"website\", function (data) {\n        console.log(\"web\", data);\n      });\n\n      socket.on(\"fanTemp\", (data) => {\n        console.log(\"received\", data);\n        setFanTemp(data);\n      });\n    });\n\n    fetch(\"http://149.28.177.118:3030/temps\", {\n      method: \"GET\",\n      headers: { \"Content-Type\": \"application/json\" },\n    })\n      .then((res) => res.json())\n      .then((data) => setTemps(data));\n\n    fetch(\"http://149.28.177.118:3030/hum\", {\n      method: \"GET\",\n      headers: { \"Content-Type\": \"application/json\" },\n    })\n      .then((res) => res.json())\n      .then((data) => setHums(data));\n  }, []);\n\n  useEffect(() => {\n    if (temps.length != 0 && hums.length != 0) {\n      const tempAggregates = getHourlyAggregates(temps);\n      const humAggregates = getHourlyAggregates(hums);\n      console.log(tempAggregates);\n      console.log(humAggregates);\n      let result = new Array();\n      for (let i = 0; i < 24; i++) {\n        let data = {};\n        if (tempAggregates[i] && humAggregates[i]) {\n          data.temp = tempAggregates[i].avg;\n          data.hum = humAggregates[i].avg;\n          data.minTemp = tempAggregates[i].min;\n          data.maxTemp = tempAggregates[i].max;\n          data.tempCount = tempAggregates[i].count;\n          data.minHum = humAggregates[i].min;\n          data.maxHum = humAggregates[i].max;\n          data.humCount = humAggregates[i].count;\n          data.hour = i;\n          result.push(data);\n        } else {\n          if (result[i - 1]) {\n            result.push({\n              temp: result[i - 1].temp,\n              hum: result[i - 1].hum,\n              minTemp: result[i - 1].minTemp,\n              maxTemp: result[i - 1].maxTemp,\n              tempCount: 1,\n              minHum: result[i - 1].minHum,\n              maxHum: result[i - 1].maxHum,\n              humCount: 1,\n              hour: i,\n            });\n          }\n        }\n      }\n      setHourlyAggregates(result);\n      setLoading(false);\n    }\n  }, [temps, hums]);\n\n  const handleTempChange = (e, value) => {\n    if (socket.connected) {\n      socket.emit(\"changeTemp\", value);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Backdrop className={classes.backdrop} open={loading}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n      <AppBar position=\"relative\" style={{ padding: \"20px\" }}>\n        <Container>\n          <Typography variant=\"h4\">\n            {\"Temperature & Humidity Tracker\"}\n          </Typography>\n        </Container>\n      </AppBar>\n      <Container style={{ marginTop: \"20px\" }}>\n        <Grid container justify=\"space-between\" spacing={2}>\n          <Grid item xs={12} style={{ padding: \"20px\" }}>\n            <Paper style={{ padding: \"20px\" }}>\n              <Typography variant=\"overline\">Temp ({\"\\u00b0C\"})</Typography>\n              <br />\n              <Slider\n                value={fanTemp}\n                color=\"secondary\"\n                min={0}\n                max={50}\n                onChange={handleTempChange}\n                step={1}\n                valueLabelDisplay=\"auto\"\n                marks={true}\n                style={{ width: \"300px\" }}\n              />\n            </Paper>\n          </Grid>\n          <Grid item xs={6} style={{ padding: \"20px\" }}>\n            <Paper style={{ padding: \"20px\" }}>\n              <Typography variant=\"overline\">\n                Current Temp ({\"\\u00b0C\"})\n              </Typography>\n              <br />\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Typography variant=\"overline\">Location 1</Typography>\n                  <DisplayCurrentBox data={temps} type=\"temp\" location={1} />\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"overline\">Location 2</Typography>\n                  <DisplayCurrentBox data={temps} type=\"temp\" location={2} />\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"overline\">Location 3</Typography>\n                  <DisplayCurrentBox data={temps} type=\"temp\" location={3} />\n                </Grid>\n              </Grid>\n            </Paper>\n          </Grid>\n          <Grid item xs={6} style={{ padding: \"20px\" }}>\n            <Paper style={{ padding: \"20px\" }}>\n              <Typography variant=\"overline\">\n                Current Hum ({\"%\"})\n              </Typography>\n              <br />\n              <Grid container spacing={2}>\n                <Grid item>\n                  <Typography variant=\"overline\">Location 1</Typography>\n                  <DisplayCurrentBox data={hums} type=\"hum\" location={1} />\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"overline\">Location 2</Typography>\n                  <DisplayCurrentBox data={hums} type=\"hum\" location={2} />\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"overline\">Location 3</Typography>\n                  <DisplayCurrentBox data={hums} type=\"hum\" location={3} />\n                </Grid>\n              </Grid>\n            </Paper>\n          </Grid>\n          <Grid style={{ padding: \"20px\" }}>\n            <Paper style={{ padding: \"20px\" }}>\n              <Typography variant=\"overline\">\n                Mean Hourly Temperature at Each Location\n              </Typography>\n              <AllLocationsLineChart type=\"temp\" data={temps} />\n            </Paper>\n          </Grid>\n          <Grid style={{ padding: \"20px\" }}>\n            <Paper style={{ padding: \"20px\" }}>\n              <Typography variant=\"overline\">\n                Mean Hourly Humidity at Each Location\n              </Typography>\n              <AllLocationsLineChart type=\"hum\" data={hums} />\n            </Paper>\n          </Grid>\n          <Grid style={{ padding: \"20px\" }}>\n            <Paper style={{ padding: \"20px\" }}>\n              <Typography variant=\"overline\">\n                Mean Hourly Temperatures At All Locations\n              </Typography>\n              <HourlyAverageLineChart data={hourlyAggregates} type=\"temp\" />\n            </Paper>\n          </Grid>\n          <Grid style={{ padding: \"20px\" }}>\n            <Paper style={{ padding: \"20px\" }}>\n              <Typography variant=\"overline\">\n                Mean Hourly Humidity At All Locations\n              </Typography>\n              <HourlyAverageLineChart data={hourlyAggregates} type=\"hum\" />\n            </Paper>\n          </Grid>\n          <Grid style={{ padding: \"20px\" }}>\n            <Paper style={{ padding: \"20px\" }}>\n              <Typography variant=\"overline\">\n                Hourly Variance (All Temp Measurements)\n              </Typography>\n              <HourlyVarianceBarChart\n                data={temps}\n                metric=\"variance\"\n                type=\"temp\"\n              />\n            </Paper>\n          </Grid>\n          <Grid style={{ padding: \"20px\" }}>\n            <Paper style={{ padding: \"20px\" }}>\n              <Typography variant=\"overline\">\n                Hourly Variance (All Humidity Measurements)\n              </Typography>\n              <HourlyVarianceBarChart\n                data={hums}\n                metric=\"variance\"\n                type=\"hum\"\n              />\n            </Paper>\n          </Grid>\n          <Grid style={{ padding: \"20px\" }}>\n            <Paper style={{ padding: \"20px\" }}>\n              <Typography variant=\"overline\">\n                Hourly Standard Deviation (All Temp Measurements)\n              </Typography>\n              <HourlyVarianceBarChart data={temps} metric=\"std\" type=\"temp\" />\n            </Paper>\n          </Grid>\n          <Grid style={{ padding: \"20px\" }}>\n            <Paper style={{ padding: \"20px\" }}>\n              <Typography variant=\"overline\">\n                Hourly Standard Deviation (All Humidity Measurements)\n              </Typography>\n              <HourlyVarianceBarChart data={hums} metric=\"std\" type=\"hum\" />\n            </Paper>\n          </Grid>\n          <Grid style={{ padding: \"20px\" }}>\n            <Paper style={{ padding: \"20px\" }}>\n              <Typography variant=\"overline\">\n                Location 1 vs Location 2 vs Location 3 (Mean Temp)\n              </Typography>\n              <AllLocationsScatterChart type=\"temp\" data={temps} />\n            </Paper>\n          </Grid>\n          <Grid style={{ padding: \"20px\" }}>\n            <Paper style={{ padding: \"20px\" }}>\n              <Typography variant=\"overline\">\n                Location 1 vs Location 2 vs Location 3 (Mean Humidity)\n              </Typography>\n              <AllLocationsScatterChart type=\"hum\" data={hums} />\n            </Paper>\n          </Grid>\n          <Grid style={{ padding: \"20px\" }}>\n            <Paper style={{ padding: \"20px\" }}>\n              <Typography variant=\"overline\">\n                Hourly Temp at Location 1\n              </Typography>\n              <SingleLocationHourlyLineChart\n                data={temps}\n                type=\"temp\"\n                location={1}\n              />\n            </Paper>\n          </Grid>\n          <Grid style={{ padding: \"20px\" }}>\n            <Paper style={{ padding: \"20px\" }}>\n              <Typography variant=\"overline\">\n                Hourly Humidity at Location 1\n              </Typography>\n              <SingleLocationHourlyLineChart\n                data={temps}\n                type=\"humidity\"\n                location={1}\n              />\n            </Paper>\n          </Grid>\n          <Grid style={{ padding: \"20px\" }}>\n            <Paper style={{ padding: \"20px\" }}>\n              <Typography variant=\"overline\">\n                Hourly Temp at Location 2\n              </Typography>\n              <SingleLocationHourlyLineChart\n                data={temps}\n                type=\"temp\"\n                location={2}\n              />\n            </Paper>\n          </Grid>\n          <Grid style={{ padding: \"20px\" }}>\n            <Paper style={{ padding: \"20px\" }}>\n              <Typography variant=\"overline\">\n                Hourly Humidity at Location 2\n              </Typography>\n              <SingleLocationHourlyLineChart\n                data={hums}\n                type=\"hum\"\n                location={2}\n              />\n            </Paper>\n          </Grid>\n          <Grid style={{ padding: \"20px\" }}>\n            <Paper style={{ padding: \"20px\" }}>\n              <Typography variant=\"overline\">\n                Hourly Temp at Location 3\n              </Typography>\n              <SingleLocationHourlyLineChart\n                data={temps}\n                type=\"temp\"\n                location={3}\n              />\n            </Paper>\n          </Grid>\n          <Grid style={{ padding: \"20px\" }}>\n            <Paper style={{ padding: \"20px\" }}>\n              <Typography variant=\"overline\">\n                Hourly Humidity at Location 3\n              </Typography>\n              <SingleLocationHourlyLineChart\n                data={hums}\n                type=\"hum\"\n                location={3}\n              />\n            </Paper>\n          </Grid>\n          <Grid style={{ padding: \"20px\" }}>\n            <Paper style={{ padding: \"20px\" }}>\n              <Typography variant=\"overline\">\n                Hourly Mean Temp vs Hourly Mean Humidity (All Locations)\n              </Typography>\n              <TempVsHumScatterChart data={hourlyAggregates} />\n            </Paper>\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <CssBaseline />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}